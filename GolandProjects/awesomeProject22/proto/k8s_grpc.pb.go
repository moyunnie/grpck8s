// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.5
// source: k8s.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// K8SServiceClient is the client API for K8SService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8SServiceClient interface {
	ListPods(ctx context.Context, in *ListPodsRequest, opts ...grpc.CallOption) (*ListPodsResponse, error)
	CreatePod(ctx context.Context, in *CreatePodRequest, opts ...grpc.CallOption) (*CreatePodResponse, error)
	DeletePod(ctx context.Context, in *DeletePodRequest, opts ...grpc.CallOption) (*DeletePodResponse, error)
	UpdatePod(ctx context.Context, in *UpdatePodRequest, opts ...grpc.CallOption) (*UpdatePodResponse, error)
	ListNameSpace(ctx context.Context, in *ListNameSpaceRequest, opts ...grpc.CallOption) (*ListNameSpaceResponse, error)
}

type k8SServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewK8SServiceClient(cc grpc.ClientConnInterface) K8SServiceClient {
	return &k8SServiceClient{cc}
}

func (c *k8SServiceClient) ListPods(ctx context.Context, in *ListPodsRequest, opts ...grpc.CallOption) (*ListPodsResponse, error) {
	out := new(ListPodsResponse)
	err := c.cc.Invoke(ctx, "/K8sService/ListPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) CreatePod(ctx context.Context, in *CreatePodRequest, opts ...grpc.CallOption) (*CreatePodResponse, error) {
	out := new(CreatePodResponse)
	err := c.cc.Invoke(ctx, "/K8sService/CreatePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) DeletePod(ctx context.Context, in *DeletePodRequest, opts ...grpc.CallOption) (*DeletePodResponse, error) {
	out := new(DeletePodResponse)
	err := c.cc.Invoke(ctx, "/K8sService/DeletePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) UpdatePod(ctx context.Context, in *UpdatePodRequest, opts ...grpc.CallOption) (*UpdatePodResponse, error) {
	out := new(UpdatePodResponse)
	err := c.cc.Invoke(ctx, "/K8sService/UpdatePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) ListNameSpace(ctx context.Context, in *ListNameSpaceRequest, opts ...grpc.CallOption) (*ListNameSpaceResponse, error) {
	out := new(ListNameSpaceResponse)
	err := c.cc.Invoke(ctx, "/K8sService/ListNameSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SServiceServer is the server API for K8SService service.
// All implementations must embed UnimplementedK8SServiceServer
// for forward compatibility
type K8SServiceServer interface {
	ListPods(context.Context, *ListPodsRequest) (*ListPodsResponse, error)
	CreatePod(context.Context, *CreatePodRequest) (*CreatePodResponse, error)
	DeletePod(context.Context, *DeletePodRequest) (*DeletePodResponse, error)
	UpdatePod(context.Context, *UpdatePodRequest) (*UpdatePodResponse, error)
	ListNameSpace(context.Context, *ListNameSpaceRequest) (*ListNameSpaceResponse, error)
	mustEmbedUnimplementedK8SServiceServer()
}

// UnimplementedK8SServiceServer must be embedded to have forward compatible implementations.
type UnimplementedK8SServiceServer struct {
}

func (UnimplementedK8SServiceServer) ListPods(context.Context, *ListPodsRequest) (*ListPodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPods not implemented")
}
func (UnimplementedK8SServiceServer) CreatePod(context.Context, *CreatePodRequest) (*CreatePodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePod not implemented")
}
func (UnimplementedK8SServiceServer) DeletePod(context.Context, *DeletePodRequest) (*DeletePodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePod not implemented")
}
func (UnimplementedK8SServiceServer) UpdatePod(context.Context, *UpdatePodRequest) (*UpdatePodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePod not implemented")
}
func (UnimplementedK8SServiceServer) ListNameSpace(context.Context, *ListNameSpaceRequest) (*ListNameSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNameSpace not implemented")
}
func (UnimplementedK8SServiceServer) mustEmbedUnimplementedK8SServiceServer() {}

// UnsafeK8SServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8SServiceServer will
// result in compilation errors.
type UnsafeK8SServiceServer interface {
	mustEmbedUnimplementedK8SServiceServer()
}

func RegisterK8SServiceServer(s grpc.ServiceRegistrar, srv K8SServiceServer) {
	s.RegisterService(&K8SService_ServiceDesc, srv)
}

func _K8SService_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/K8sService/ListPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).ListPods(ctx, req.(*ListPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_CreatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).CreatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/K8sService/CreatePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).CreatePod(ctx, req.(*CreatePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_DeletePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).DeletePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/K8sService/DeletePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).DeletePod(ctx, req.(*DeletePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_UpdatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).UpdatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/K8sService/UpdatePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).UpdatePod(ctx, req.(*UpdatePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_ListNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).ListNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/K8sService/ListNameSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).ListNameSpace(ctx, req.(*ListNameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// K8SService_ServiceDesc is the grpc.ServiceDesc for K8SService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8SService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "K8sService",
	HandlerType: (*K8SServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPods",
			Handler:    _K8SService_ListPods_Handler,
		},
		{
			MethodName: "CreatePod",
			Handler:    _K8SService_CreatePod_Handler,
		},
		{
			MethodName: "DeletePod",
			Handler:    _K8SService_DeletePod_Handler,
		},
		{
			MethodName: "UpdatePod",
			Handler:    _K8SService_UpdatePod_Handler,
		},
		{
			MethodName: "ListNameSpace",
			Handler:    _K8SService_ListNameSpace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8s.proto",
}
